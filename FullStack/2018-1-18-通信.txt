## 数据交互

http 所有数据请求(除websocket)对于服务器来说其实都是表单提交 只是前端的写法不同

1. 表单   最基本的 最简单的
2. ajax   不用刷新页面 节约流量 降低服务端的压力  用户体验也好
          缺点：网慢会重复提交 可让按钮禁用
          默认不能跨域，需要服务器配置
3. jsonp (过渡，已经不常用了)  解决跨域安全性太差

4. WebSocket  快、双向、可跨域

ajax        性能低、单向、跨域需配置
websocket   性能高、双向（双工）、默认可跨域

安全性：
1. 系统安全性
2. 代码安全性——校验
--------------------------------------------------------------------------------

跨域：
www.baidu.com/a.html  ->   www.360.cn/1.txt

xss 攻击

跨域是必须的：
1. 360buy.com -> jd.com；t.sina.cn -> weibo.com
2. 调用第三方数据

方法：
1. 表单默认可跨域
2. ajax - 麻烦、安全
3. jsonp - 简单，有风险
4. websocket

------------------------------------------------------------------------------
重点：
1. http 协议
2. 原生js

------------------------------------------------------------------------------

http 协议

http    容易被攻击
https   security   安全

http1.0：一次性连接
http1.1：保持连接 等页面完全加载完后才断开  性能提升
http2.0（草案）：
        1. 强制https
        2. 自带双向通信
        3. 多路复用

RFC，是一系列以编号排定的文件。文件收集了有关互联网相关信息，以及UNIX和互联网社区的软件文件。

http协议文件： https://tools.ietf.org/html/rfc2616

1. 三次握手：客户端建立连接  服务器接受  客户端请求数据  服务器返回数据
2. http消息(header/body): 消息头header <= 32K；消息体body <= 1G

------------------------------------------------------------------------------

OSI七层交换 参考 模型
1. 物理层：物理学家、通信工程 - 材料、电压等
2. 链路层：内网寻址     ARP、ICMP
3. 网络层：外网寻址     IP
4. 传输层：通信稳定性   TCP
5. 表现层：x 同意各个网络结构
6. 会话层：x 服务器可记录状态，但实际上一直是无状态通信
7. 应用层：应用细节     HTTP、FTP、SMTP、POP3、

五层模型
1. 物理层
2. 链路层
3. 网络层
4. 传输层
5. 应用层

无状态通信


TCP - 传输控制协议 （对质量要求高）  eg.文件下载、聊天
    1. 保证到达：丢失重传
    2. 保证质量：错误重发
    3. 保证顺序
UCP - 用户数据报协议  对质量没绝对要求，对延迟有很高的要求  eg. IP电话、视频直播
    1. 不保证到达
    2. 不保证质量
    3. 不保证顺序

------------------------------------------------------------------------------

表单：
1. 属性
    action:  提交地址
    method:  提交方式 - GET、POST、PUT、HEADER、DELETE、也可自定义
    name:    必须加、可以重复，name相同 在服务器端就是个数组。
    sumit按钮: 提交数据

2. 数据提交方法
    GET：    数据放在url里面
        1. 容量有限
        2. 数据可见（仅是表单）
        3. 有缓存
        4. 利于分享和收藏：在url里就有页面需要的数据，可直接分享给别人打开或收藏。

    POST：   数据放在 http-body 里面
        1. 容量很大
        2. 数据不可见
        3. 不缓存
        4. 没法分享和收藏


  GET、POST安全性完全一样，https才是真安全。

3. 校验

<form action="http://localhost/a.php" method="GET" id="form1">
  <label>
    用户名：<input type="text" name="user" value="">
  </label>
  <label>
    密码：<input type="password" name="pass">
  </label>
  <input type="submit" value="提交">
</form>

<script>
  //const $ = function(...args){
    //return document.querySelectorAll(...args);
  //}
  const $ = document.querySelectorAll.bind(document);

  window.onload=function(){
    let oForm = $('#form1')[0];
  }


</script>

4. 重复提交
   1. 在提交时禁用按钮    disabled true
   2. 完成ajax后启用按钮  disabled false
------------------------------------------------------------------------------

ajax:

  1. 原生ajax xhr
  2. 通信状态
  3. 通信结果 状态码


------------------------------------------------------------------------------




























